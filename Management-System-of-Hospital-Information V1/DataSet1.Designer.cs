//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HMS {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private 药品资料DataTable table药品资料;
        
        private 门诊收费项目DataTable table门诊收费项目;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["药品资料"] != null)) {
                    base.Tables.Add(new 药品资料DataTable(ds.Tables["药品资料"]));
                }
                if ((ds.Tables["门诊收费项目"] != null)) {
                    base.Tables.Add(new 门诊收费项目DataTable(ds.Tables["门诊收费项目"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 药品资料DataTable 药品资料 {
            get {
                return this.table药品资料;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 门诊收费项目DataTable 门诊收费项目 {
            get {
                return this.table门诊收费项目;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["药品资料"] != null)) {
                    base.Tables.Add(new 药品资料DataTable(ds.Tables["药品资料"]));
                }
                if ((ds.Tables["门诊收费项目"] != null)) {
                    base.Tables.Add(new 门诊收费项目DataTable(ds.Tables["门诊收费项目"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table药品资料 = ((药品资料DataTable)(base.Tables["药品资料"]));
            if ((initTable == true)) {
                if ((this.table药品资料 != null)) {
                    this.table药品资料.InitVars();
                }
            }
            this.table门诊收费项目 = ((门诊收费项目DataTable)(base.Tables["门诊收费项目"]));
            if ((initTable == true)) {
                if ((this.table门诊收费项目 != null)) {
                    this.table门诊收费项目.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.table药品资料 = new 药品资料DataTable();
            base.Tables.Add(this.table药品资料);
            this.table门诊收费项目 = new 门诊收费项目DataTable();
            base.Tables.Add(this.table门诊收费项目);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize药品资料() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize门诊收费项目() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void 药品资料RowChangeEventHandler(object sender, 药品资料RowChangeEvent e);
        
        public delegate void 门诊收费项目RowChangeEventHandler(object sender, 门诊收费项目RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 药品资料DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column编号;
            
            private System.Data.DataColumn column名称;
            
            private System.Data.DataColumn column规格;
            
            private System.Data.DataColumn column整量单位;
            
            private System.Data.DataColumn column散量单位;
            
            private System.Data.DataColumn column入库单价;
            
            private System.Data.DataColumn column出库单价;
            
            private System.Data.DataColumn column批发价;
            
            private System.Data.DataColumn column整散比;
            
            private System.Data.DataColumn column分类;
            
            private System.Data.DataColumn column费用归类;
            
            private System.Data.DataColumn column拼音码;
            
            private System.Data.DataColumn column效期;
            
            private System.Data.DataColumn column上限;
            
            private System.Data.DataColumn column下限;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 药品资料DataTable() {
                this.TableName = "药品资料";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 药品资料DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 药品资料DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 编号Column {
                get {
                    return this.column编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 名称Column {
                get {
                    return this.column名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 规格Column {
                get {
                    return this.column规格;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 整量单位Column {
                get {
                    return this.column整量单位;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 散量单位Column {
                get {
                    return this.column散量单位;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 入库单价Column {
                get {
                    return this.column入库单价;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 出库单价Column {
                get {
                    return this.column出库单价;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 批发价Column {
                get {
                    return this.column批发价;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 整散比Column {
                get {
                    return this.column整散比;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 分类Column {
                get {
                    return this.column分类;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 费用归类Column {
                get {
                    return this.column费用归类;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 拼音码Column {
                get {
                    return this.column拼音码;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 效期Column {
                get {
                    return this.column效期;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 上限Column {
                get {
                    return this.column上限;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 下限Column {
                get {
                    return this.column下限;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 药品资料Row this[int index] {
                get {
                    return ((药品资料Row)(this.Rows[index]));
                }
            }
            
            public event 药品资料RowChangeEventHandler 药品资料RowChanging;
            
            public event 药品资料RowChangeEventHandler 药品资料RowChanged;
            
            public event 药品资料RowChangeEventHandler 药品资料RowDeleting;
            
            public event 药品资料RowChangeEventHandler 药品资料RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add药品资料Row(药品资料Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 药品资料Row Add药品资料Row(string 编号, string 名称, string 规格, string 整量单位, string 散量单位, decimal 入库单价, decimal 出库单价, decimal 批发价, decimal 整散比, string 分类, string 费用归类, string 拼音码, int 效期, decimal 上限, decimal 下限) {
                药品资料Row row药品资料Row = ((药品资料Row)(this.NewRow()));
                row药品资料Row.ItemArray = new object[] {
                        编号,
                        名称,
                        规格,
                        整量单位,
                        散量单位,
                        入库单价,
                        出库单价,
                        批发价,
                        整散比,
                        分类,
                        费用归类,
                        拼音码,
                        效期,
                        上限,
                        下限};
                this.Rows.Add(row药品资料Row);
                return row药品资料Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 药品资料Row FindBy编号(string 编号) {
                return ((药品资料Row)(this.Rows.Find(new object[] {
                            编号})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                药品资料DataTable cln = ((药品资料DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new 药品资料DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column编号 = base.Columns["编号"];
                this.column名称 = base.Columns["名称"];
                this.column规格 = base.Columns["规格"];
                this.column整量单位 = base.Columns["整量单位"];
                this.column散量单位 = base.Columns["散量单位"];
                this.column入库单价 = base.Columns["入库单价"];
                this.column出库单价 = base.Columns["出库单价"];
                this.column批发价 = base.Columns["批发价"];
                this.column整散比 = base.Columns["整散比"];
                this.column分类 = base.Columns["分类"];
                this.column费用归类 = base.Columns["费用归类"];
                this.column拼音码 = base.Columns["拼音码"];
                this.column效期 = base.Columns["效期"];
                this.column上限 = base.Columns["上限"];
                this.column下限 = base.Columns["下限"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column编号 = new System.Data.DataColumn("编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column编号);
                this.column名称 = new System.Data.DataColumn("名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column名称);
                this.column规格 = new System.Data.DataColumn("规格", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column规格);
                this.column整量单位 = new System.Data.DataColumn("整量单位", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column整量单位);
                this.column散量单位 = new System.Data.DataColumn("散量单位", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column散量单位);
                this.column入库单价 = new System.Data.DataColumn("入库单价", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column入库单价);
                this.column出库单价 = new System.Data.DataColumn("出库单价", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column出库单价);
                this.column批发价 = new System.Data.DataColumn("批发价", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column批发价);
                this.column整散比 = new System.Data.DataColumn("整散比", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column整散比);
                this.column分类 = new System.Data.DataColumn("分类", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column分类);
                this.column费用归类 = new System.Data.DataColumn("费用归类", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column费用归类);
                this.column拼音码 = new System.Data.DataColumn("拼音码", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column拼音码);
                this.column效期 = new System.Data.DataColumn("效期", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column效期);
                this.column上限 = new System.Data.DataColumn("上限", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column上限);
                this.column下限 = new System.Data.DataColumn("下限", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column下限);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSet1Key1", new System.Data.DataColumn[] {
                                this.column编号}, true));
                this.column编号.AllowDBNull = false;
                this.column编号.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 药品资料Row New药品资料Row() {
                return ((药品资料Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new 药品资料Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(药品资料Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.药品资料RowChanged != null)) {
                    this.药品资料RowChanged(this, new 药品资料RowChangeEvent(((药品资料Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.药品资料RowChanging != null)) {
                    this.药品资料RowChanging(this, new 药品资料RowChangeEvent(((药品资料Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.药品资料RowDeleted != null)) {
                    this.药品资料RowDeleted(this, new 药品资料RowChangeEvent(((药品资料Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.药品资料RowDeleting != null)) {
                    this.药品资料RowDeleting(this, new 药品资料RowChangeEvent(((药品资料Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove药品资料Row(药品资料Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "药品资料DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 门诊收费项目DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column编号;
            
            private System.Data.DataColumn column名称;
            
            private System.Data.DataColumn column拼音码;
            
            private System.Data.DataColumn column费用;
            
            private System.Data.DataColumn column费用分类;
            
            private System.Data.DataColumn column病种分类;
            
            private System.Data.DataColumn column备注;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊收费项目DataTable() {
                this.TableName = "门诊收费项目";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门诊收费项目DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 门诊收费项目DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 编号Column {
                get {
                    return this.column编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 名称Column {
                get {
                    return this.column名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 拼音码Column {
                get {
                    return this.column拼音码;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 费用Column {
                get {
                    return this.column费用;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 费用分类Column {
                get {
                    return this.column费用分类;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 病种分类Column {
                get {
                    return this.column病种分类;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊收费项目Row this[int index] {
                get {
                    return ((门诊收费项目Row)(this.Rows[index]));
                }
            }
            
            public event 门诊收费项目RowChangeEventHandler 门诊收费项目RowChanging;
            
            public event 门诊收费项目RowChangeEventHandler 门诊收费项目RowChanged;
            
            public event 门诊收费项目RowChangeEventHandler 门诊收费项目RowDeleting;
            
            public event 门诊收费项目RowChangeEventHandler 门诊收费项目RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add门诊收费项目Row(门诊收费项目Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊收费项目Row Add门诊收费项目Row(string 编号, string 名称, string 拼音码, decimal 费用, string 费用分类, string 病种分类, string 备注) {
                门诊收费项目Row row门诊收费项目Row = ((门诊收费项目Row)(this.NewRow()));
                row门诊收费项目Row.ItemArray = new object[] {
                        编号,
                        名称,
                        拼音码,
                        费用,
                        费用分类,
                        病种分类,
                        备注};
                this.Rows.Add(row门诊收费项目Row);
                return row门诊收费项目Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊收费项目Row FindBy编号(string 编号) {
                return ((门诊收费项目Row)(this.Rows.Find(new object[] {
                            编号})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                门诊收费项目DataTable cln = ((门诊收费项目DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new 门诊收费项目DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column编号 = base.Columns["编号"];
                this.column名称 = base.Columns["名称"];
                this.column拼音码 = base.Columns["拼音码"];
                this.column费用 = base.Columns["费用"];
                this.column费用分类 = base.Columns["费用分类"];
                this.column病种分类 = base.Columns["病种分类"];
                this.column备注 = base.Columns["备注"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column编号 = new System.Data.DataColumn("编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column编号);
                this.column名称 = new System.Data.DataColumn("名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column名称);
                this.column拼音码 = new System.Data.DataColumn("拼音码", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column拼音码);
                this.column费用 = new System.Data.DataColumn("费用", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column费用);
                this.column费用分类 = new System.Data.DataColumn("费用分类", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column费用分类);
                this.column病种分类 = new System.Data.DataColumn("病种分类", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column病种分类);
                this.column备注 = new System.Data.DataColumn("备注", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSet1Key2", new System.Data.DataColumn[] {
                                this.column编号}, true));
                this.column编号.AllowDBNull = false;
                this.column编号.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊收费项目Row New门诊收费项目Row() {
                return ((门诊收费项目Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new 门诊收费项目Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(门诊收费项目Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.门诊收费项目RowChanged != null)) {
                    this.门诊收费项目RowChanged(this, new 门诊收费项目RowChangeEvent(((门诊收费项目Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.门诊收费项目RowChanging != null)) {
                    this.门诊收费项目RowChanging(this, new 门诊收费项目RowChangeEvent(((门诊收费项目Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.门诊收费项目RowDeleted != null)) {
                    this.门诊收费项目RowDeleted(this, new 门诊收费项目RowChangeEvent(((门诊收费项目Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.门诊收费项目RowDeleting != null)) {
                    this.门诊收费项目RowDeleting(this, new 门诊收费项目RowChangeEvent(((门诊收费项目Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove门诊收费项目Row(门诊收费项目Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "门诊收费项目DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 药品资料Row : System.Data.DataRow {
            
            private 药品资料DataTable table药品资料;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 药品资料Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table药品资料 = ((药品资料DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 编号 {
                get {
                    return ((string)(this[this.table药品资料.编号Column]));
                }
                set {
                    this[this.table药品资料.编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 名称 {
                get {
                    try {
                        return ((string)(this[this.table药品资料.名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格 {
                get {
                    try {
                        return ((string)(this[this.table药品资料.规格Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“规格”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.规格Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 整量单位 {
                get {
                    try {
                        return ((string)(this[this.table药品资料.整量单位Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“整量单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.整量单位Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 散量单位 {
                get {
                    try {
                        return ((string)(this[this.table药品资料.散量单位Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“散量单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.散量单位Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 入库单价 {
                get {
                    try {
                        return ((decimal)(this[this.table药品资料.入库单价Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“入库单价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.入库单价Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 出库单价 {
                get {
                    try {
                        return ((decimal)(this[this.table药品资料.出库单价Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“出库单价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.出库单价Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 批发价 {
                get {
                    try {
                        return ((decimal)(this[this.table药品资料.批发价Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“批发价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.批发价Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 整散比 {
                get {
                    try {
                        return ((decimal)(this[this.table药品资料.整散比Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“整散比”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.整散比Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 分类 {
                get {
                    try {
                        return ((string)(this[this.table药品资料.分类Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“分类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.分类Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 费用归类 {
                get {
                    try {
                        return ((string)(this[this.table药品资料.费用归类Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“费用归类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.费用归类Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 拼音码 {
                get {
                    try {
                        return ((string)(this[this.table药品资料.拼音码Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“拼音码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.拼音码Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 效期 {
                get {
                    try {
                        return ((int)(this[this.table药品资料.效期Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“效期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.效期Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 上限 {
                get {
                    try {
                        return ((decimal)(this[this.table药品资料.上限Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“上限”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.上限Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 下限 {
                get {
                    try {
                        return ((decimal)(this[this.table药品资料.下限Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“药品资料”中列“下限”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table药品资料.下限Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is名称Null() {
                return this.IsNull(this.table药品资料.名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set名称Null() {
                this[this.table药品资料.名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格Null() {
                return this.IsNull(this.table药品资料.规格Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格Null() {
                this[this.table药品资料.规格Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is整量单位Null() {
                return this.IsNull(this.table药品资料.整量单位Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set整量单位Null() {
                this[this.table药品资料.整量单位Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is散量单位Null() {
                return this.IsNull(this.table药品资料.散量单位Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set散量单位Null() {
                this[this.table药品资料.散量单位Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入库单价Null() {
                return this.IsNull(this.table药品资料.入库单价Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入库单价Null() {
                this[this.table药品资料.入库单价Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is出库单价Null() {
                return this.IsNull(this.table药品资料.出库单价Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set出库单价Null() {
                this[this.table药品资料.出库单价Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is批发价Null() {
                return this.IsNull(this.table药品资料.批发价Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set批发价Null() {
                this[this.table药品资料.批发价Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is整散比Null() {
                return this.IsNull(this.table药品资料.整散比Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set整散比Null() {
                this[this.table药品资料.整散比Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is分类Null() {
                return this.IsNull(this.table药品资料.分类Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set分类Null() {
                this[this.table药品资料.分类Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is费用归类Null() {
                return this.IsNull(this.table药品资料.费用归类Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set费用归类Null() {
                this[this.table药品资料.费用归类Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is拼音码Null() {
                return this.IsNull(this.table药品资料.拼音码Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set拼音码Null() {
                this[this.table药品资料.拼音码Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is效期Null() {
                return this.IsNull(this.table药品资料.效期Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set效期Null() {
                this[this.table药品资料.效期Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is上限Null() {
                return this.IsNull(this.table药品资料.上限Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set上限Null() {
                this[this.table药品资料.上限Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is下限Null() {
                return this.IsNull(this.table药品资料.下限Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set下限Null() {
                this[this.table药品资料.下限Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 门诊收费项目Row : System.Data.DataRow {
            
            private 门诊收费项目DataTable table门诊收费项目;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门诊收费项目Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table门诊收费项目 = ((门诊收费项目DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 编号 {
                get {
                    return ((string)(this[this.table门诊收费项目.编号Column]));
                }
                set {
                    this[this.table门诊收费项目.编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 名称 {
                get {
                    try {
                        return ((string)(this[this.table门诊收费项目.名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊收费项目”中列“名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊收费项目.名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 拼音码 {
                get {
                    try {
                        return ((string)(this[this.table门诊收费项目.拼音码Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊收费项目”中列“拼音码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊收费项目.拼音码Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 费用 {
                get {
                    try {
                        return ((decimal)(this[this.table门诊收费项目.费用Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊收费项目”中列“费用”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊收费项目.费用Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 费用分类 {
                get {
                    try {
                        return ((string)(this[this.table门诊收费项目.费用分类Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊收费项目”中列“费用分类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊收费项目.费用分类Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病种分类 {
                get {
                    try {
                        return ((string)(this[this.table门诊收费项目.病种分类Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊收费项目”中列“病种分类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊收费项目.病种分类Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.table门诊收费项目.备注Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊收费项目”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊收费项目.备注Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is名称Null() {
                return this.IsNull(this.table门诊收费项目.名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set名称Null() {
                this[this.table门诊收费项目.名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is拼音码Null() {
                return this.IsNull(this.table门诊收费项目.拼音码Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set拼音码Null() {
                this[this.table门诊收费项目.拼音码Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is费用Null() {
                return this.IsNull(this.table门诊收费项目.费用Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set费用Null() {
                this[this.table门诊收费项目.费用Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is费用分类Null() {
                return this.IsNull(this.table门诊收费项目.费用分类Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set费用分类Null() {
                this[this.table门诊收费项目.费用分类Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病种分类Null() {
                return this.IsNull(this.table门诊收费项目.病种分类Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病种分类Null() {
                this[this.table门诊收费项目.病种分类Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.table门诊收费项目.备注Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.table门诊收费项目.备注Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 药品资料RowChangeEvent : System.EventArgs {
            
            private 药品资料Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 药品资料RowChangeEvent(药品资料Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 药品资料Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 门诊收费项目RowChangeEvent : System.EventArgs {
            
            private 门诊收费项目Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊收费项目RowChangeEvent(门诊收费项目Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊收费项目Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591