//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HMS {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet2")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet2 : System.Data.DataSet {
        
        private 门诊挂号DataTable table门诊挂号;
        
        private 门诊划价DataTable table门诊划价;
        
        private v收费项目及药品DataTable tablev收费项目及药品;
        
        private 门诊划价明细DataTable table门诊划价明细;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet2() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet2(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["门诊挂号"] != null)) {
                    base.Tables.Add(new 门诊挂号DataTable(ds.Tables["门诊挂号"]));
                }
                if ((ds.Tables["门诊划价"] != null)) {
                    base.Tables.Add(new 门诊划价DataTable(ds.Tables["门诊划价"]));
                }
                if ((ds.Tables["v收费项目及药品"] != null)) {
                    base.Tables.Add(new v收费项目及药品DataTable(ds.Tables["v收费项目及药品"]));
                }
                if ((ds.Tables["门诊划价明细"] != null)) {
                    base.Tables.Add(new 门诊划价明细DataTable(ds.Tables["门诊划价明细"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 门诊挂号DataTable 门诊挂号 {
            get {
                return this.table门诊挂号;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 门诊划价DataTable 门诊划价 {
            get {
                return this.table门诊划价;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public v收费项目及药品DataTable v收费项目及药品 {
            get {
                return this.tablev收费项目及药品;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 门诊划价明细DataTable 门诊划价明细 {
            get {
                return this.table门诊划价明细;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet2 cln = ((DataSet2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["门诊挂号"] != null)) {
                    base.Tables.Add(new 门诊挂号DataTable(ds.Tables["门诊挂号"]));
                }
                if ((ds.Tables["门诊划价"] != null)) {
                    base.Tables.Add(new 门诊划价DataTable(ds.Tables["门诊划价"]));
                }
                if ((ds.Tables["v收费项目及药品"] != null)) {
                    base.Tables.Add(new v收费项目及药品DataTable(ds.Tables["v收费项目及药品"]));
                }
                if ((ds.Tables["门诊划价明细"] != null)) {
                    base.Tables.Add(new 门诊划价明细DataTable(ds.Tables["门诊划价明细"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table门诊挂号 = ((门诊挂号DataTable)(base.Tables["门诊挂号"]));
            if ((initTable == true)) {
                if ((this.table门诊挂号 != null)) {
                    this.table门诊挂号.InitVars();
                }
            }
            this.table门诊划价 = ((门诊划价DataTable)(base.Tables["门诊划价"]));
            if ((initTable == true)) {
                if ((this.table门诊划价 != null)) {
                    this.table门诊划价.InitVars();
                }
            }
            this.tablev收费项目及药品 = ((v收费项目及药品DataTable)(base.Tables["v收费项目及药品"]));
            if ((initTable == true)) {
                if ((this.tablev收费项目及药品 != null)) {
                    this.tablev收费项目及药品.InitVars();
                }
            }
            this.table门诊划价明细 = ((门诊划价明细DataTable)(base.Tables["门诊划价明细"]));
            if ((initTable == true)) {
                if ((this.table门诊划价明细 != null)) {
                    this.table门诊划价明细.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.table门诊挂号 = new 门诊挂号DataTable();
            base.Tables.Add(this.table门诊挂号);
            this.table门诊划价 = new 门诊划价DataTable();
            base.Tables.Add(this.table门诊划价);
            this.tablev收费项目及药品 = new v收费项目及药品DataTable();
            base.Tables.Add(this.tablev收费项目及药品);
            this.table门诊划价明细 = new 门诊划价明细DataTable();
            base.Tables.Add(this.table门诊划价明细);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize门诊挂号() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize门诊划价() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializev收费项目及药品() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize门诊划价明细() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet2 ds = new DataSet2();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void 门诊挂号RowChangeEventHandler(object sender, 门诊挂号RowChangeEvent e);
        
        public delegate void 门诊划价RowChangeEventHandler(object sender, 门诊划价RowChangeEvent e);
        
        public delegate void v收费项目及药品RowChangeEventHandler(object sender, v收费项目及药品RowChangeEvent e);
        
        public delegate void 门诊划价明细RowChangeEventHandler(object sender, 门诊划价明细RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 门诊挂号DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column编号;
            
            private System.Data.DataColumn column病人编号;
            
            private System.Data.DataColumn column姓名;
            
            private System.Data.DataColumn column性别;
            
            private System.Data.DataColumn column挂号科室;
            
            private System.Data.DataColumn column费用类型;
            
            private System.Data.DataColumn column挂号类型;
            
            private System.Data.DataColumn column挂号费用;
            
            private System.Data.DataColumn column医生;
            
            private System.Data.DataColumn column时间;
            
            private System.Data.DataColumn column是否已划价;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊挂号DataTable() {
                this.TableName = "门诊挂号";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门诊挂号DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 门诊挂号DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 编号Column {
                get {
                    return this.column编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 病人编号Column {
                get {
                    return this.column病人编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 性别Column {
                get {
                    return this.column性别;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 挂号科室Column {
                get {
                    return this.column挂号科室;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 费用类型Column {
                get {
                    return this.column费用类型;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 挂号类型Column {
                get {
                    return this.column挂号类型;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 挂号费用Column {
                get {
                    return this.column挂号费用;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 医生Column {
                get {
                    return this.column医生;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 时间Column {
                get {
                    return this.column时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 是否已划价Column {
                get {
                    return this.column是否已划价;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊挂号Row this[int index] {
                get {
                    return ((门诊挂号Row)(this.Rows[index]));
                }
            }
            
            public event 门诊挂号RowChangeEventHandler 门诊挂号RowChanging;
            
            public event 门诊挂号RowChangeEventHandler 门诊挂号RowChanged;
            
            public event 门诊挂号RowChangeEventHandler 门诊挂号RowDeleting;
            
            public event 门诊挂号RowChangeEventHandler 门诊挂号RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add门诊挂号Row(门诊挂号Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊挂号Row Add门诊挂号Row(string 编号, string 病人编号, string 姓名, string 性别, string 挂号科室, string 费用类型, string 挂号类型, decimal 挂号费用, string 医生, System.DateTime 时间, string 是否已划价) {
                门诊挂号Row row门诊挂号Row = ((门诊挂号Row)(this.NewRow()));
                row门诊挂号Row.ItemArray = new object[] {
                        编号,
                        病人编号,
                        姓名,
                        性别,
                        挂号科室,
                        费用类型,
                        挂号类型,
                        挂号费用,
                        医生,
                        时间,
                        是否已划价};
                this.Rows.Add(row门诊挂号Row);
                return row门诊挂号Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊挂号Row FindBy编号(string 编号) {
                return ((门诊挂号Row)(this.Rows.Find(new object[] {
                            编号})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                门诊挂号DataTable cln = ((门诊挂号DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new 门诊挂号DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column编号 = base.Columns["编号"];
                this.column病人编号 = base.Columns["病人编号"];
                this.column姓名 = base.Columns["姓名"];
                this.column性别 = base.Columns["性别"];
                this.column挂号科室 = base.Columns["挂号科室"];
                this.column费用类型 = base.Columns["费用类型"];
                this.column挂号类型 = base.Columns["挂号类型"];
                this.column挂号费用 = base.Columns["挂号费用"];
                this.column医生 = base.Columns["医生"];
                this.column时间 = base.Columns["时间"];
                this.column是否已划价 = base.Columns["是否已划价"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column编号 = new System.Data.DataColumn("编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column编号);
                this.column病人编号 = new System.Data.DataColumn("病人编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column病人编号);
                this.column姓名 = new System.Data.DataColumn("姓名", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column姓名);
                this.column性别 = new System.Data.DataColumn("性别", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column性别);
                this.column挂号科室 = new System.Data.DataColumn("挂号科室", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column挂号科室);
                this.column费用类型 = new System.Data.DataColumn("费用类型", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column费用类型);
                this.column挂号类型 = new System.Data.DataColumn("挂号类型", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column挂号类型);
                this.column挂号费用 = new System.Data.DataColumn("挂号费用", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column挂号费用);
                this.column医生 = new System.Data.DataColumn("医生", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column医生);
                this.column时间 = new System.Data.DataColumn("时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column时间);
                this.column是否已划价 = new System.Data.DataColumn("是否已划价", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column是否已划价);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataSet2Key1", new System.Data.DataColumn[] {
                                this.column编号}, true));
                this.column编号.AllowDBNull = false;
                this.column编号.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊挂号Row New门诊挂号Row() {
                return ((门诊挂号Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new 门诊挂号Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(门诊挂号Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.门诊挂号RowChanged != null)) {
                    this.门诊挂号RowChanged(this, new 门诊挂号RowChangeEvent(((门诊挂号Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.门诊挂号RowChanging != null)) {
                    this.门诊挂号RowChanging(this, new 门诊挂号RowChangeEvent(((门诊挂号Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.门诊挂号RowDeleted != null)) {
                    this.门诊挂号RowDeleted(this, new 门诊挂号RowChangeEvent(((门诊挂号Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.门诊挂号RowDeleting != null)) {
                    this.门诊挂号RowDeleting(this, new 门诊挂号RowChangeEvent(((门诊挂号Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove门诊挂号Row(门诊挂号Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "门诊挂号DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 门诊划价DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column姓名;
            
            private System.Data.DataColumn column性别;
            
            private System.Data.DataColumn column编号;
            
            private System.Data.DataColumn column科室;
            
            private System.Data.DataColumn column挂号编号;
            
            private System.Data.DataColumn column医生;
            
            private System.Data.DataColumn column划价时间;
            
            private System.Data.DataColumn column划价员;
            
            private System.Data.DataColumn column是否收费;
            
            private System.Data.DataColumn column收费员;
            
            private System.Data.DataColumn column收费时间;
            
            private System.Data.DataColumn column划价金额;
            
            private System.Data.DataColumn column是否发药;
            
            private System.Data.DataColumn column发药时间;
            
            private System.Data.DataColumn column发药员;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价DataTable() {
                this.TableName = "门诊划价";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门诊划价DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 门诊划价DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 性别Column {
                get {
                    return this.column性别;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 编号Column {
                get {
                    return this.column编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 科室Column {
                get {
                    return this.column科室;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 挂号编号Column {
                get {
                    return this.column挂号编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 医生Column {
                get {
                    return this.column医生;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 划价时间Column {
                get {
                    return this.column划价时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 划价员Column {
                get {
                    return this.column划价员;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 是否收费Column {
                get {
                    return this.column是否收费;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 收费员Column {
                get {
                    return this.column收费员;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 收费时间Column {
                get {
                    return this.column收费时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 划价金额Column {
                get {
                    return this.column划价金额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 是否发药Column {
                get {
                    return this.column是否发药;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 发药时间Column {
                get {
                    return this.column发药时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 发药员Column {
                get {
                    return this.column发药员;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价Row this[int index] {
                get {
                    return ((门诊划价Row)(this.Rows[index]));
                }
            }
            
            public event 门诊划价RowChangeEventHandler 门诊划价RowChanging;
            
            public event 门诊划价RowChangeEventHandler 门诊划价RowChanged;
            
            public event 门诊划价RowChangeEventHandler 门诊划价RowDeleting;
            
            public event 门诊划价RowChangeEventHandler 门诊划价RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add门诊划价Row(门诊划价Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价Row Add门诊划价Row(string 姓名, string 性别, string 编号, string 科室, string 挂号编号, string 医生, System.DateTime 划价时间, string 划价员, string 是否收费, string 收费员, System.DateTime 收费时间, decimal 划价金额, string 是否发药, System.DateTime 发药时间, string 发药员) {
                门诊划价Row row门诊划价Row = ((门诊划价Row)(this.NewRow()));
                row门诊划价Row.ItemArray = new object[] {
                        姓名,
                        性别,
                        编号,
                        科室,
                        挂号编号,
                        医生,
                        划价时间,
                        划价员,
                        是否收费,
                        收费员,
                        收费时间,
                        划价金额,
                        是否发药,
                        发药时间,
                        发药员};
                this.Rows.Add(row门诊划价Row);
                return row门诊划价Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                门诊划价DataTable cln = ((门诊划价DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new 门诊划价DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column姓名 = base.Columns["姓名"];
                this.column性别 = base.Columns["性别"];
                this.column编号 = base.Columns["编号"];
                this.column科室 = base.Columns["科室"];
                this.column挂号编号 = base.Columns["挂号编号"];
                this.column医生 = base.Columns["医生"];
                this.column划价时间 = base.Columns["划价时间"];
                this.column划价员 = base.Columns["划价员"];
                this.column是否收费 = base.Columns["是否收费"];
                this.column收费员 = base.Columns["收费员"];
                this.column收费时间 = base.Columns["收费时间"];
                this.column划价金额 = base.Columns["划价金额"];
                this.column是否发药 = base.Columns["是否发药"];
                this.column发药时间 = base.Columns["发药时间"];
                this.column发药员 = base.Columns["发药员"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column姓名 = new System.Data.DataColumn("姓名", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column姓名);
                this.column性别 = new System.Data.DataColumn("性别", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column性别);
                this.column编号 = new System.Data.DataColumn("编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column编号);
                this.column科室 = new System.Data.DataColumn("科室", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column科室);
                this.column挂号编号 = new System.Data.DataColumn("挂号编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column挂号编号);
                this.column医生 = new System.Data.DataColumn("医生", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column医生);
                this.column划价时间 = new System.Data.DataColumn("划价时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column划价时间);
                this.column划价员 = new System.Data.DataColumn("划价员", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column划价员);
                this.column是否收费 = new System.Data.DataColumn("是否收费", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column是否收费);
                this.column收费员 = new System.Data.DataColumn("收费员", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column收费员);
                this.column收费时间 = new System.Data.DataColumn("收费时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column收费时间);
                this.column划价金额 = new System.Data.DataColumn("划价金额", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column划价金额);
                this.column是否发药 = new System.Data.DataColumn("是否发药", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column是否发药);
                this.column发药时间 = new System.Data.DataColumn("发药时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column发药时间);
                this.column发药员 = new System.Data.DataColumn("发药员", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column发药员);
                this.column姓名.AllowDBNull = false;
                this.column挂号编号.AllowDBNull = false;
                this.column收费员.AllowDBNull = false;
                this.column是否发药.AllowDBNull = false;
                this.column发药时间.AllowDBNull = false;
                this.column发药员.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价Row New门诊划价Row() {
                return ((门诊划价Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new 门诊划价Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(门诊划价Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.门诊划价RowChanged != null)) {
                    this.门诊划价RowChanged(this, new 门诊划价RowChangeEvent(((门诊划价Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.门诊划价RowChanging != null)) {
                    this.门诊划价RowChanging(this, new 门诊划价RowChangeEvent(((门诊划价Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.门诊划价RowDeleted != null)) {
                    this.门诊划价RowDeleted(this, new 门诊划价RowChangeEvent(((门诊划价Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.门诊划价RowDeleting != null)) {
                    this.门诊划价RowDeleting(this, new 门诊划价RowChangeEvent(((门诊划价Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove门诊划价Row(门诊划价Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "门诊划价DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class v收费项目及药品DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column编号;
            
            private System.Data.DataColumn column名称;
            
            private System.Data.DataColumn column规格;
            
            private System.Data.DataColumn column单位;
            
            private System.Data.DataColumn column单价;
            
            private System.Data.DataColumn column拼音码;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public v收费项目及药品DataTable() {
                this.TableName = "v收费项目及药品";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal v收费项目及药品DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected v收费项目及药品DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 编号Column {
                get {
                    return this.column编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 名称Column {
                get {
                    return this.column名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 规格Column {
                get {
                    return this.column规格;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 单位Column {
                get {
                    return this.column单位;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 单价Column {
                get {
                    return this.column单价;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 拼音码Column {
                get {
                    return this.column拼音码;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public v收费项目及药品Row this[int index] {
                get {
                    return ((v收费项目及药品Row)(this.Rows[index]));
                }
            }
            
            public event v收费项目及药品RowChangeEventHandler v收费项目及药品RowChanging;
            
            public event v收费项目及药品RowChangeEventHandler v收费项目及药品RowChanged;
            
            public event v收费项目及药品RowChangeEventHandler v收费项目及药品RowDeleting;
            
            public event v收费项目及药品RowChangeEventHandler v收费项目及药品RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addv收费项目及药品Row(v收费项目及药品Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public v收费项目及药品Row Addv收费项目及药品Row(string 编号, string 名称, string 规格, string 单位, decimal 单价, string 拼音码) {
                v收费项目及药品Row rowv收费项目及药品Row = ((v收费项目及药品Row)(this.NewRow()));
                rowv收费项目及药品Row.ItemArray = new object[] {
                        编号,
                        名称,
                        规格,
                        单位,
                        单价,
                        拼音码};
                this.Rows.Add(rowv收费项目及药品Row);
                return rowv收费项目及药品Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                v收费项目及药品DataTable cln = ((v收费项目及药品DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new v收费项目及药品DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column编号 = base.Columns["编号"];
                this.column名称 = base.Columns["名称"];
                this.column规格 = base.Columns["规格"];
                this.column单位 = base.Columns["单位"];
                this.column单价 = base.Columns["单价"];
                this.column拼音码 = base.Columns["拼音码"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column编号 = new System.Data.DataColumn("编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column编号);
                this.column名称 = new System.Data.DataColumn("名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column名称);
                this.column规格 = new System.Data.DataColumn("规格", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column规格);
                this.column单位 = new System.Data.DataColumn("单位", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column单位);
                this.column单价 = new System.Data.DataColumn("单价", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column单价);
                this.column拼音码 = new System.Data.DataColumn("拼音码", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column拼音码);
                this.column编号.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public v收费项目及药品Row Newv收费项目及药品Row() {
                return ((v收费项目及药品Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new v收费项目及药品Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(v收费项目及药品Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.v收费项目及药品RowChanged != null)) {
                    this.v收费项目及药品RowChanged(this, new v收费项目及药品RowChangeEvent(((v收费项目及药品Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.v收费项目及药品RowChanging != null)) {
                    this.v收费项目及药品RowChanging(this, new v收费项目及药品RowChangeEvent(((v收费项目及药品Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.v收费项目及药品RowDeleted != null)) {
                    this.v收费项目及药品RowDeleted(this, new v收费项目及药品RowChangeEvent(((v收费项目及药品Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.v收费项目及药品RowDeleting != null)) {
                    this.v收费项目及药品RowDeleting(this, new v收费项目及药品RowChangeEvent(((v收费项目及药品Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removev收费项目及药品Row(v收费项目及药品Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "v收费项目及药品DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 门诊划价明细DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column编号;
            
            private System.Data.DataColumn column药品编号;
            
            private System.Data.DataColumn column名称;
            
            private System.Data.DataColumn column单价;
            
            private System.Data.DataColumn column数量;
            
            private System.Data.DataColumn column金额;
            
            private System.Data.DataColumn column划价编号;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价明细DataTable() {
                this.TableName = "门诊划价明细";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门诊划价明细DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 门诊划价明细DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 编号Column {
                get {
                    return this.column编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 药品编号Column {
                get {
                    return this.column药品编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 名称Column {
                get {
                    return this.column名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 单价Column {
                get {
                    return this.column单价;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 数量Column {
                get {
                    return this.column数量;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 金额Column {
                get {
                    return this.column金额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 划价编号Column {
                get {
                    return this.column划价编号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价明细Row this[int index] {
                get {
                    return ((门诊划价明细Row)(this.Rows[index]));
                }
            }
            
            public event 门诊划价明细RowChangeEventHandler 门诊划价明细RowChanging;
            
            public event 门诊划价明细RowChangeEventHandler 门诊划价明细RowChanged;
            
            public event 门诊划价明细RowChangeEventHandler 门诊划价明细RowDeleting;
            
            public event 门诊划价明细RowChangeEventHandler 门诊划价明细RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add门诊划价明细Row(门诊划价明细Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价明细Row Add门诊划价明细Row(string 药品编号, string 名称, decimal 单价, decimal 数量, decimal 金额, string 划价编号) {
                门诊划价明细Row row门诊划价明细Row = ((门诊划价明细Row)(this.NewRow()));
                row门诊划价明细Row.ItemArray = new object[] {
                        null,
                        药品编号,
                        名称,
                        单价,
                        数量,
                        金额,
                        划价编号};
                this.Rows.Add(row门诊划价明细Row);
                return row门诊划价明细Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                门诊划价明细DataTable cln = ((门诊划价明细DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new 门诊划价明细DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column编号 = base.Columns["编号"];
                this.column药品编号 = base.Columns["药品编号"];
                this.column名称 = base.Columns["名称"];
                this.column单价 = base.Columns["单价"];
                this.column数量 = base.Columns["数量"];
                this.column金额 = base.Columns["金额"];
                this.column划价编号 = base.Columns["划价编号"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column编号 = new System.Data.DataColumn("编号", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column编号);
                this.column药品编号 = new System.Data.DataColumn("药品编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column药品编号);
                this.column名称 = new System.Data.DataColumn("名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column名称);
                this.column单价 = new System.Data.DataColumn("单价", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column单价);
                this.column数量 = new System.Data.DataColumn("数量", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column数量);
                this.column金额 = new System.Data.DataColumn("金额", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column金额);
                this.column划价编号 = new System.Data.DataColumn("划价编号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column划价编号);
                this.column编号.AutoIncrement = true;
                this.column编号.AllowDBNull = false;
                this.column编号.ReadOnly = true;
                this.column药品编号.AllowDBNull = false;
                this.column划价编号.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价明细Row New门诊划价明细Row() {
                return ((门诊划价明细Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new 门诊划价明细Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(门诊划价明细Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.门诊划价明细RowChanged != null)) {
                    this.门诊划价明细RowChanged(this, new 门诊划价明细RowChangeEvent(((门诊划价明细Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.门诊划价明细RowChanging != null)) {
                    this.门诊划价明细RowChanging(this, new 门诊划价明细RowChangeEvent(((门诊划价明细Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.门诊划价明细RowDeleted != null)) {
                    this.门诊划价明细RowDeleted(this, new 门诊划价明细RowChangeEvent(((门诊划价明细Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.门诊划价明细RowDeleting != null)) {
                    this.门诊划价明细RowDeleting(this, new 门诊划价明细RowChangeEvent(((门诊划价明细Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove门诊划价明细Row(门诊划价明细Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "门诊划价明细DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 门诊挂号Row : System.Data.DataRow {
            
            private 门诊挂号DataTable table门诊挂号;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门诊挂号Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table门诊挂号 = ((门诊挂号DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 编号 {
                get {
                    return ((string)(this[this.table门诊挂号.编号Column]));
                }
                set {
                    this[this.table门诊挂号.编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病人编号 {
                get {
                    try {
                        return ((string)(this[this.table门诊挂号.病人编号Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“病人编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.病人编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 姓名 {
                get {
                    try {
                        return ((string)(this[this.table门诊挂号.姓名Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.姓名Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 性别 {
                get {
                    try {
                        return ((string)(this[this.table门诊挂号.性别Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“性别”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.性别Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 挂号科室 {
                get {
                    try {
                        return ((string)(this[this.table门诊挂号.挂号科室Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“挂号科室”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.挂号科室Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 费用类型 {
                get {
                    try {
                        return ((string)(this[this.table门诊挂号.费用类型Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“费用类型”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.费用类型Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 挂号类型 {
                get {
                    try {
                        return ((string)(this[this.table门诊挂号.挂号类型Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“挂号类型”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.挂号类型Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 挂号费用 {
                get {
                    try {
                        return ((decimal)(this[this.table门诊挂号.挂号费用Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“挂号费用”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.挂号费用Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 医生 {
                get {
                    try {
                        return ((string)(this[this.table门诊挂号.医生Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“医生”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.医生Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 时间 {
                get {
                    try {
                        return ((System.DateTime)(this[this.table门诊挂号.时间Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 是否已划价 {
                get {
                    try {
                        return ((string)(this[this.table门诊挂号.是否已划价Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊挂号”中列“是否已划价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊挂号.是否已划价Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病人编号Null() {
                return this.IsNull(this.table门诊挂号.病人编号Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病人编号Null() {
                this[this.table门诊挂号.病人编号Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is姓名Null() {
                return this.IsNull(this.table门诊挂号.姓名Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set姓名Null() {
                this[this.table门诊挂号.姓名Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is性别Null() {
                return this.IsNull(this.table门诊挂号.性别Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set性别Null() {
                this[this.table门诊挂号.性别Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is挂号科室Null() {
                return this.IsNull(this.table门诊挂号.挂号科室Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set挂号科室Null() {
                this[this.table门诊挂号.挂号科室Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is费用类型Null() {
                return this.IsNull(this.table门诊挂号.费用类型Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set费用类型Null() {
                this[this.table门诊挂号.费用类型Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is挂号类型Null() {
                return this.IsNull(this.table门诊挂号.挂号类型Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set挂号类型Null() {
                this[this.table门诊挂号.挂号类型Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is挂号费用Null() {
                return this.IsNull(this.table门诊挂号.挂号费用Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set挂号费用Null() {
                this[this.table门诊挂号.挂号费用Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is医生Null() {
                return this.IsNull(this.table门诊挂号.医生Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set医生Null() {
                this[this.table门诊挂号.医生Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is时间Null() {
                return this.IsNull(this.table门诊挂号.时间Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set时间Null() {
                this[this.table门诊挂号.时间Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is是否已划价Null() {
                return this.IsNull(this.table门诊挂号.是否已划价Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set是否已划价Null() {
                this[this.table门诊挂号.是否已划价Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 门诊划价Row : System.Data.DataRow {
            
            private 门诊划价DataTable table门诊划价;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门诊划价Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table门诊划价 = ((门诊划价DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 姓名 {
                get {
                    return ((string)(this[this.table门诊划价.姓名Column]));
                }
                set {
                    this[this.table门诊划价.姓名Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 性别 {
                get {
                    try {
                        return ((string)(this[this.table门诊划价.性别Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“性别”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.性别Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 编号 {
                get {
                    try {
                        return ((string)(this[this.table门诊划价.编号Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 科室 {
                get {
                    try {
                        return ((string)(this[this.table门诊划价.科室Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“科室”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.科室Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 挂号编号 {
                get {
                    return ((string)(this[this.table门诊划价.挂号编号Column]));
                }
                set {
                    this[this.table门诊划价.挂号编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 医生 {
                get {
                    try {
                        return ((string)(this[this.table门诊划价.医生Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“医生”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.医生Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 划价时间 {
                get {
                    try {
                        return ((System.DateTime)(this[this.table门诊划价.划价时间Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“划价时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.划价时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 划价员 {
                get {
                    try {
                        return ((string)(this[this.table门诊划价.划价员Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“划价员”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.划价员Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 是否收费 {
                get {
                    try {
                        return ((string)(this[this.table门诊划价.是否收费Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“是否收费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.是否收费Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 收费员 {
                get {
                    return ((string)(this[this.table门诊划价.收费员Column]));
                }
                set {
                    this[this.table门诊划价.收费员Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 收费时间 {
                get {
                    try {
                        return ((System.DateTime)(this[this.table门诊划价.收费时间Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“收费时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.收费时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 划价金额 {
                get {
                    try {
                        return ((decimal)(this[this.table门诊划价.划价金额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价”中列“划价金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价.划价金额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 是否发药 {
                get {
                    return ((string)(this[this.table门诊划价.是否发药Column]));
                }
                set {
                    this[this.table门诊划价.是否发药Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 发药时间 {
                get {
                    return ((System.DateTime)(this[this.table门诊划价.发药时间Column]));
                }
                set {
                    this[this.table门诊划价.发药时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 发药员 {
                get {
                    return ((string)(this[this.table门诊划价.发药员Column]));
                }
                set {
                    this[this.table门诊划价.发药员Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is性别Null() {
                return this.IsNull(this.table门诊划价.性别Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set性别Null() {
                this[this.table门诊划价.性别Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is编号Null() {
                return this.IsNull(this.table门诊划价.编号Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set编号Null() {
                this[this.table门诊划价.编号Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is科室Null() {
                return this.IsNull(this.table门诊划价.科室Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set科室Null() {
                this[this.table门诊划价.科室Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is医生Null() {
                return this.IsNull(this.table门诊划价.医生Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set医生Null() {
                this[this.table门诊划价.医生Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is划价时间Null() {
                return this.IsNull(this.table门诊划价.划价时间Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set划价时间Null() {
                this[this.table门诊划价.划价时间Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is划价员Null() {
                return this.IsNull(this.table门诊划价.划价员Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set划价员Null() {
                this[this.table门诊划价.划价员Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is是否收费Null() {
                return this.IsNull(this.table门诊划价.是否收费Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set是否收费Null() {
                this[this.table门诊划价.是否收费Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is收费时间Null() {
                return this.IsNull(this.table门诊划价.收费时间Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set收费时间Null() {
                this[this.table门诊划价.收费时间Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is划价金额Null() {
                return this.IsNull(this.table门诊划价.划价金额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set划价金额Null() {
                this[this.table门诊划价.划价金额Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class v收费项目及药品Row : System.Data.DataRow {
            
            private v收费项目及药品DataTable tablev收费项目及药品;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal v收费项目及药品Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablev收费项目及药品 = ((v收费项目及药品DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 编号 {
                get {
                    return ((string)(this[this.tablev收费项目及药品.编号Column]));
                }
                set {
                    this[this.tablev收费项目及药品.编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 名称 {
                get {
                    try {
                        return ((string)(this[this.tablev收费项目及药品.名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“v收费项目及药品”中列“名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablev收费项目及药品.名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格 {
                get {
                    try {
                        return ((string)(this[this.tablev收费项目及药品.规格Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“v收费项目及药品”中列“规格”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablev收费项目及药品.规格Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单位 {
                get {
                    try {
                        return ((string)(this[this.tablev收费项目及药品.单位Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“v收费项目及药品”中列“单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablev收费项目及药品.单位Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 单价 {
                get {
                    try {
                        return ((decimal)(this[this.tablev收费项目及药品.单价Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“v收费项目及药品”中列“单价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablev收费项目及药品.单价Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 拼音码 {
                get {
                    try {
                        return ((string)(this[this.tablev收费项目及药品.拼音码Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“v收费项目及药品”中列“拼音码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablev收费项目及药品.拼音码Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is名称Null() {
                return this.IsNull(this.tablev收费项目及药品.名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set名称Null() {
                this[this.tablev收费项目及药品.名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格Null() {
                return this.IsNull(this.tablev收费项目及药品.规格Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格Null() {
                this[this.tablev收费项目及药品.规格Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is单位Null() {
                return this.IsNull(this.tablev收费项目及药品.单位Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set单位Null() {
                this[this.tablev收费项目及药品.单位Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is单价Null() {
                return this.IsNull(this.tablev收费项目及药品.单价Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set单价Null() {
                this[this.tablev收费项目及药品.单价Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is拼音码Null() {
                return this.IsNull(this.tablev收费项目及药品.拼音码Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set拼音码Null() {
                this[this.tablev收费项目及药品.拼音码Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 门诊划价明细Row : System.Data.DataRow {
            
            private 门诊划价明细DataTable table门诊划价明细;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门诊划价明细Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table门诊划价明细 = ((门诊划价明细DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 编号 {
                get {
                    return ((int)(this[this.table门诊划价明细.编号Column]));
                }
                set {
                    this[this.table门诊划价明细.编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 药品编号 {
                get {
                    return ((string)(this[this.table门诊划价明细.药品编号Column]));
                }
                set {
                    this[this.table门诊划价明细.药品编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 名称 {
                get {
                    try {
                        return ((string)(this[this.table门诊划价明细.名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价明细”中列“名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价明细.名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 单价 {
                get {
                    try {
                        return ((decimal)(this[this.table门诊划价明细.单价Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价明细”中列“单价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价明细.单价Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 数量 {
                get {
                    try {
                        return ((decimal)(this[this.table门诊划价明细.数量Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价明细”中列“数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价明细.数量Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 金额 {
                get {
                    try {
                        return ((decimal)(this[this.table门诊划价明细.金额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“门诊划价明细”中列“金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门诊划价明细.金额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 划价编号 {
                get {
                    return ((string)(this[this.table门诊划价明细.划价编号Column]));
                }
                set {
                    this[this.table门诊划价明细.划价编号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is名称Null() {
                return this.IsNull(this.table门诊划价明细.名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set名称Null() {
                this[this.table门诊划价明细.名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is单价Null() {
                return this.IsNull(this.table门诊划价明细.单价Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set单价Null() {
                this[this.table门诊划价明细.单价Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is数量Null() {
                return this.IsNull(this.table门诊划价明细.数量Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set数量Null() {
                this[this.table门诊划价明细.数量Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is金额Null() {
                return this.IsNull(this.table门诊划价明细.金额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set金额Null() {
                this[this.table门诊划价明细.金额Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 门诊挂号RowChangeEvent : System.EventArgs {
            
            private 门诊挂号Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊挂号RowChangeEvent(门诊挂号Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊挂号Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 门诊划价RowChangeEvent : System.EventArgs {
            
            private 门诊划价Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价RowChangeEvent(门诊划价Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class v收费项目及药品RowChangeEvent : System.EventArgs {
            
            private v收费项目及药品Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public v收费项目及药品RowChangeEvent(v收费项目及药品Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public v收费项目及药品Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 门诊划价明细RowChangeEvent : System.EventArgs {
            
            private 门诊划价明细Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价明细RowChangeEvent(门诊划价明细Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门诊划价明细Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591